
import AGStopwatch = require("agstopwatch/AGStopwatch");
import {isNullOrUndefined} from "util";
/**
 Even Fibonacci numbers
 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 find the sum of the even-valued terms.

 Output to 4M:
 Problem 2 brute force: 4613732 Time: 1ms
 */
export class Problem2 {
    private static maxValue :number = 4000000;

    /**
     * Solve via generating all Fibonacci numbers and summing even numbers.
     */
    static bruteForce(): void {
        let stopWatch:AGStopwatch = new AGStopwatch();
        stopWatch.start();

        let total:number = 0;

        for (let value of fibonacciGenerator(this.maxValue)) {
            if (value % 2 == 0) {
                total += value;
            }
        }

        stopWatch.stop();
        console.log(`Problem 2 brute force: ${total} Time: ${stopWatch.elapsed}ms`);
    }


}

/**
 * Generate Fibonacci numbers starting with 1, 2, ...
 * using a 2-value array to hold the last 2 values.
 *
 * @param max   [optional] A maximum value
 */
function* fibonacciGenerator(max: number) {
    let values : number[] = [1,2];
    while (isNullOrUndefined(max) || values[0] < max) {
        yield values[0];
        values.push(values.shift() + values[0]);
    }
}